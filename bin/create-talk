#!/usr/bin/env ruby
if ARGV.length == 0
  puts "Need to pass a talk name"
  exit 1
end

require 'fileutils'
require 'yaml'

include FileUtils

def log *args
#  puts *args
end

ROOT_DIR = File.expand_path(File.join(__dir__, '..'))
log ROOT_DIR
BLUEPRINT = File.join(ROOT_DIR, 'blueprint')
log BLUEPRINT
SHARED = File.join(BLUEPRINT, 'shared')
log SHARED
PER_TALK = File.join(BLUEPRINT, 'per_talk')
log PER_TALK
TALK_NAME = ARGV.last
log TALK_NAME

TALK = File.join(ROOT_DIR, TALK_NAME)
if File.exists? TALK
  puts "Talk already exists"
  exit 1
end
mkdir TALK

def dir_contents dir
  dir = dir.to_s

  Dir[File.join(dir, "*")].map { |x| File.expand_path(x)}
end

def dir_has_only_files? dir
  Dir[File.join(dir, "*")].all? { |x| File.file?(x) || x == '.' || x == '..' }
end

def process_filename filename
  if filename == '__name__'
    TALK_NAME
  else
    filename
  end
end

def move src, dest, link_dir_if_possible = true, &block
  dir_contents(src).each do |f|
    log "Processing #{f}"
    new_dest = File.join(dest, process_filename(File.basename(f)))
    if File.directory?(f)
      if link_dir_if_possible && dir_has_only_files?(f)
        log "Adding symbolic link from #{f} to #{new_dest}"
        ln_s f, new_dest
      else
        log "Creating #{new_dest}"
        mkdir_p new_dest
        log "Recurring with #{f} and #{new_dest}"
        move f, new_dest, link_dir_if_possible, &block
      end
    elsif File.file?(f)
      block.call f, new_dest
    end
  end
end

move SHARED, TALK do |src, dst|
  log "Adding symbolic link from #{src} to #{dst}"
  ln_s src, dst
end

move PER_TALK, TALK, false do |src, dst|
  log "Copying #{src} to #{dst}"
  cp src, dst
end

cp "#{PER_TALK}/.terminusMaximus", TALK

EMPTY_DIRS = [
  ["img", "people"],
  ["img", TALK_NAME]
]

EMPTY_DIRS.each do |path|
  dir = File.join(TALK, *path)
  mkdir_p dir
  touch File.join(dir, ".gitkeep")
end

_config = File.join(TALK, '_config.yml')
File.write(_config, File.read(_config).gsub(/__name__/, TALK_NAME))
automated = File.join(ROOT_DIR, "bin", "automated")
talks_list_regex = /TALKS="([^"]+)"/
File.write(automated, File.read(automated).gsub(talks_list_regex) do |line|
  talks = line.match(talks_list_regex)[1].split(' ')
  talks << TALK_NAME
  "TALKS=\"#{talks.join(' ')}\""
end
)

_landing_talk = File.join(ROOT_DIR, 'landing/src', '_current_talks', "#{TALK_NAME}.md")
File.write(_landing_talk, <<TALK_DATA)
---
name: #{TALK_NAME}
date: 2017-12-31
link: #{TALK_NAME}
city: Madrid, Spain
image: /img/editions/#{TALK_NAME}.png
---
TALK_DATA
